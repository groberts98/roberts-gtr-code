{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\projects\\\\dissertation\\\\d-stress-frontend\\\\src\\\\components\\\\calendar\\\\Calendar.js\",\n    _s = $RefreshSig$();\n\n// component for rendering the calendar\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport StressorList from '../stressor-components/stressor-list/StressorList';\nimport StressorForm from '../stressor-components/stressor-form/StressorForm';\nimport addIcon from '../../resources/addIcon.png';\nimport './Calendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calendar = () => {\n  _s();\n\n  const [dateObject, setDateObject] = useState(moment()); //controls current dates shown in the calendar\n\n  const [data, setData] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(moment(new Date()).format('YYYY-MM-DD'));\n  const [screen, setScreen] = useState('stressorList');\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch('https://dstress-backend.herokuapp.com/api/stressor/GetStressor.php?id=&filter=');\n\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n\n        setData(await response.json());\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  const getHeaders = () => ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n    className: \"day-heading\",\n    children: day\n  }, day, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this) // display calendar as table with days as headers\n  );\n\n  const getDays = () => {\n    // function returning the table content for current given month\n    let j = 0;\n    let emptyCells = []; // have emtpy cells till first day of month\n\n    for (let i = 0; i < moment(dateObject).startOf(\"month\").format('d') - 1; i++) {\n      emptyCells.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"day-empty\",\n        children: ''\n      }, j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 23\n      }, this));\n      j++;\n    }\n\n    let daysInMonth = []; // all the days in the current month\n\n    for (let i = 1; i <= dateObject.daysInMonth(); i++) {\n      const current = moment(dateObject).set('date', i).format('YYYY-MM-DD');\n      const isCurrent = current === moment().format('YYYY-MM-DD') ? '-current' : ''; // is current day this cell?\n\n      var colour = '';\n\n      if (!isCurrent) {\n        // if its the current day, simply render it as a teel block\n        const todaysStressors = data.filter(stressor => //find all stressors occuring on given day\n        stressor['hidden'] === '0' && current === stressor['date']);\n        const max = Math.max.apply(Math, todaysStressors.map(stressor => // find the max stress level for that day\n        stressor['actual-SL'] ? stressor['actual-SL'] : stressor['anticipated-SL']));\n\n        switch (max) {\n          // colour square based on the max stress level\n          case 0:\n            colour = '-green';\n            break;\n\n          case 1:\n            colour = '-blue';\n            break;\n\n          case 2:\n            colour = '-purple';\n            break;\n\n          case 3:\n            colour = '-yellow';\n            break;\n\n          case 4:\n            colour = '-oragne';\n            break;\n\n          case 5:\n            colour = '-red';\n            break;\n\n          default:\n            colour = '';\n        }\n      }\n\n      daysInMonth.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        className: `day${colour}${isCurrent}`,\n        onClick: () => {\n          setSelectedDate(current);\n        },\n        children: i\n      }, j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this));\n      j++;\n    }\n\n    let totalSlots = [...emptyCells, ...daysInMonth]; // all the cells in that month\n\n    while (totalSlots.length % 7 !== 1) {\n      // fill out remaining squares in calendar with empty cells\n      totalSlots.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"day-empty\",\n        children: ''\n      }, j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 23\n      }, this));\n      j++;\n    }\n\n    var tableContent = [];\n\n    for (let i = 1; i < totalSlots.length; i++) {\n      let row = [];\n\n      while (i % 7 !== 0) {\n        // organise array of cells into rows of 7\n        row.push(totalSlots[i - 1]);\n        i++;\n      }\n\n      row.push(totalSlots[i - 1]);\n      tableContent.push(row);\n    }\n\n    return tableContent.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navigation-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"month\",\n          onClick: e => {\n            setDateObject(moment(dateObject).subtract(1, 'months')); // when clicking left arrow for month, go back 1 month\n          },\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"<\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"month\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: dateObject.format('MMMM')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"month\",\n          onClick: e => {\n            setDateObject(moment(dateObject).add(1, 'months')); // alternatively, go foward 1 month\n          },\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \">\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"year\",\n          onClick: e => {\n            setDateObject(moment(dateObject).add(1, 'years')); // do the same for years\n          },\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \">\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"year\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: dateObject.format('Y')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"year\",\n          onClick: e => {\n            setDateObject(moment(dateObject).subtract(1, 'years'));\n          },\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"<\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        cellSpacing: \"0\",\n        className: \"calendar-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: \"calendar-table-header\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: getHeaders()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          className: \"calendar-table-content\",\n          children: getDays()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: addIcon,\n        alt: \"add stressor\",\n        className: \"add-icon\",\n        onClick: () => setScreen('addStressor') // select add icon to add stressor for given day\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"current-date\",\n        children: moment(selectedDate).format('dddd, Do MMMM YYYY')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), screen === 'addStressor' &&\n    /*#__PURE__*/\n    // show stressor list or stressor form under calendar\n    _jsxDEV(StressorForm, {\n      date: selectedDate,\n      function: \"Save\",\n      goBack: () => setScreen('stressorList')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this), screen === 'stressorList' && /*#__PURE__*/_jsxDEV(StressorList, {\n      data: data.filter(stressor => stressor['date'] === selectedDate)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calendar, \"xf3AxiPfJsI54kIXSAjY7kNuy2U=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["C:/xampp/htdocs/projects/dissertation/d-stress-frontend/src/components/calendar/Calendar.js"],"names":["React","useState","useEffect","moment","StressorList","StressorForm","addIcon","Calendar","dateObject","setDateObject","data","setData","selectedDate","setSelectedDate","Date","format","screen","setScreen","fetchData","response","fetch","ok","Error","statusText","json","error","console","log","getHeaders","map","day","getDays","j","emptyCells","i","startOf","push","daysInMonth","current","set","isCurrent","colour","todaysStressors","filter","stressor","max","Math","apply","totalSlots","length","tableContent","row","e","subtract","add"],"mappings":"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","sourcesContent":["// component for rendering the calendar\r\nimport React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\n\r\nimport StressorList from '../stressor-components/stressor-list/StressorList'\r\nimport StressorForm from '../stressor-components/stressor-form/StressorForm'\r\n\r\nimport addIcon from '../../resources/addIcon.png'\r\n\r\nimport './Calendar.css'\r\n\r\nconst Calendar = () => {\r\n  const [dateObject, setDateObject] = useState(moment()) //controls current dates shown in the calendar\r\n  const [data, setData] = useState([])\r\n  const [selectedDate, setSelectedDate] = useState(moment(new Date()).format('YYYY-MM-DD'))\r\n  const [screen, setScreen] = useState('stressorList')\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const response = await fetch('https://dstress-backend.herokuapp.com/api/stressor/GetStressor.php?id=&filter=')\r\n        if (!response.ok) {\r\n          throw Error(response.statusText)\r\n        }\r\n        setData(await response.json())\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n  const getHeaders = () => (\r\n    ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map(day => (\r\n      <th key={day} className=\"day-heading\">{day}</th> // display calendar as table with days as headers\r\n    ))\r\n  )\r\n  \r\n  const getDays = () => { // function returning the table content for current given month\r\n    let j=0\r\n    let emptyCells = []  // have emtpy cells till first day of month\r\n    for (let i=0; i<moment(dateObject).startOf(\"month\").format('d')-1; i++) {\r\n      emptyCells.push(<td key={j} className='day-empty'>{''}</td>)\r\n      j++\r\n    }\r\n  \r\n    let daysInMonth = [] // all the days in the current month\r\n    for (let i=1; i<=dateObject.daysInMonth(); i++) {\r\n      const current = moment(dateObject).set('date', i).format('YYYY-MM-DD')\r\n      const isCurrent = current === moment().format('YYYY-MM-DD') ? '-current' : '' // is current day this cell?\r\n      var colour = '' \r\n      if (!isCurrent) { // if its the current day, simply render it as a teel block\r\n        const todaysStressors = data.filter(stressor => ( //find all stressors occuring on given day\r\n          (stressor['hidden'] === '0') &&\r\n          current === stressor['date']\r\n        ))\r\n        const max = Math.max.apply(Math, todaysStressors.map(stressor => ( // find the max stress level for that day\r\n            stressor['actual-SL'] ?\r\n            stressor['actual-SL'] :\r\n            stressor['anticipated-SL']\r\n          ))\r\n        )\r\n        switch (max) { // colour square based on the max stress level\r\n          case 0: colour = '-green'\r\n                  break\r\n          case 1: colour = '-blue'\r\n                  break\r\n          case 2: colour = '-purple'\r\n                  break\r\n          case 3: colour = '-yellow'\r\n                  break\r\n          case 4: colour = '-oragne'\r\n                  break\r\n          case 5: colour = '-red'\r\n                  break\r\n          default: colour = ''\r\n        }\r\n      }\r\n      daysInMonth.push(\r\n        <td\r\n          key={j}\r\n          className={`day${colour}${isCurrent}`}\r\n          onClick={() => {\r\n            setSelectedDate(current)}}\r\n        >\r\n          {i}\r\n        </td>\r\n      )\r\n      j++\r\n    }\r\n\r\n    let totalSlots = [...emptyCells, ...daysInMonth] // all the cells in that month\r\n\r\n    while (totalSlots.length%7 !== 1) { // fill out remaining squares in calendar with empty cells\r\n      totalSlots.push(<td key={j} className='day-empty'>{''}</td>)\r\n      j++\r\n    }\r\n\r\n    var tableContent = []\r\n    for (let i=1; i<totalSlots.length; i++) {\r\n      let row = []\r\n      while (i%7 !== 0) { // organise array of cells into rows of 7\r\n        row.push(totalSlots[i-1])\r\n        i++\r\n      }\r\n      row.push(totalSlots[i-1])\r\n      tableContent.push(row)\r\n    }\r\n\r\n    return(tableContent.map((row, i) => (\r\n      <tr key={i}>{row}</tr>\r\n    )))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className='calendar'>\r\n        <div className='navigation-bar'>{/* Select month and year via the navigaiton bar */}\r\n          <span\r\n            className='month'\r\n            onClick={e => {\r\n              setDateObject(moment(dateObject).subtract(1, 'months')) // when clicking left arrow for month, go back 1 month\r\n            }}\r\n          >\r\n            <b>&lt;</b>\r\n          </span>\r\n          <span className='month'>\r\n            <b>{dateObject.format('MMMM')}</b>{/* display current month */} \r\n          </span>\r\n          <span\r\n            className='month'\r\n            onClick={e => {\r\n              setDateObject(moment(dateObject).add(1, 'months')) // alternatively, go foward 1 month\r\n            }}\r\n          >\r\n            <b>&gt;</b>\r\n          </span>\r\n          <span\r\n            className='year'\r\n            onClick={e => {\r\n              setDateObject(moment(dateObject).add(1, 'years')) // do the same for years\r\n            }}\r\n          >\r\n            <b>&gt;</b>\r\n          </span>\r\n          <span className='year'>\r\n            <b>{dateObject.format('Y')}</b>{/* show currently chosen year */}\r\n          </span>\r\n          <span\r\n            className='year'\r\n            onClick={e => {\r\n              setDateObject(moment(dateObject).subtract(1, 'years'))\r\n            }}\r\n          >\r\n            <b>&lt;</b>\r\n          </span>\r\n        </div>\r\n        <table cellSpacing='0' className='calendar-table'>{/* build calendar */}\r\n          <thead className='calendar-table-header'>\r\n            <tr>{getHeaders()}</tr>\r\n          </thead>\r\n          <tbody className='calendar-table-content'>{getDays()}</tbody>\r\n        </table>\r\n      </div>\r\n      <div className='calendar-content'>\r\n        <img\r\n          src={addIcon}\r\n          alt='add stressor'\r\n          className='add-icon'\r\n          onClick={() => setScreen('addStressor')} // select add icon to add stressor for given day\r\n        />\r\n        <h3 className='current-date'>{moment(selectedDate).format('dddd, Do MMMM YYYY')}</h3>{/* show selected date */}\r\n        <hr/>\r\n      </div>\r\n      {screen === 'addStressor' && // show stressor list or stressor form under calendar\r\n        <StressorForm \r\n          date={selectedDate}\r\n          function='Save'\r\n          goBack={() => setScreen('stressorList')}\r\n        />\r\n      }\r\n      {screen === 'stressorList' &&\r\n        <StressorList\r\n          data={data.filter(stressor => stressor['date']===selectedDate)}\r\n        />\r\n      }\r\n      <br/><br/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Calendar\r\n"]},"metadata":{},"sourceType":"module"}