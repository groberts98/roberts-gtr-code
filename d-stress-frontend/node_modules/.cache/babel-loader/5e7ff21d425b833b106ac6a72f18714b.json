{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\projects\\\\dstress\\\\src\\\\components\\\\stressor-components\\\\stressor-list\\\\StressorList.js\",\n    _s = $RefreshSig$();\n\n// component for outputting a list of stressor tiles\nimport React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport Stressor from '../stressor/Stressor';\nimport NoStressors from '../no-stressors/NoStressors';\nimport StressorTile from '../stressor-tile/StressorTile';\nimport './StressorList.css';\n\nconst StressorList = props => {\n  _s();\n\n  const [currentTile, setCurrentTile] = useState(''); // display stressor tile content when clicked\n\n  const [showAll, setShowAll] = useState(false); // whether or not to show hidden stressors\n\n  const displayStressors = () => props.data && props.data.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stressor-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-header\",\n      children: [props.header && /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [props.header, \" Stressors\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 26\n      }, this), props.header && /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"showAllCheckbox-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"checkbox-label\",\n          children: \"Show All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          \"data-testid\": \"showAll\",\n          className: \"checkbox\",\n          type: \"checkbox\",\n          name: \"showAll\",\n          onChange: () => setShowAll(!showAll)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), props.data.map((stressor, index) => (showAll || stressor['hidden'] === '0') &&\n    /*#__PURE__*/\n    // display all stressors if showall is selected otherwise show non hidden ones\n    _jsxDEV(StressorTile, {\n      className: 'stressorTile',\n      id: stressor['id'],\n      title: stressor['title'],\n      date: stressor['date'],\n      description: stressor['description'],\n      copingPlan: stressor['coping-plan'],\n      anticipatedSL: stressor['anticipated-SL'],\n      actualSL: stressor['actual-SL'],\n      uncertainty: stressor['uncertainty'],\n      uncontrollability: stressor['uncontrollability'],\n      onClick: id => setCurrentTile(id)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(NoStressors, {\n    type: props.header\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: currentTile && props.data.map(obj => obj.id).includes(currentTile) ?\n    /*#__PURE__*/\n    // either show a specific stressor tiles content or the entire list of tiles\n    _jsxDEV(Stressor, {\n      stressor: props.data.filter(obj => obj.id === currentTile),\n      goBack: () => {\n        setCurrentTile('');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : displayStressors()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StressorList, \"1lq7bgX4k0uPuSAzdQ5LPdVkr2Y=\");\n\n_c = StressorList;\nStressorList.propTypes = {\n  data: propTypes.array.isRequired,\n  header: propTypes.string\n};\nexport default StressorList;\n\nvar _c;\n\n$RefreshReg$(_c, \"StressorList\");","map":{"version":3,"sources":["C:/xampp/htdocs/projects/dstress/src/components/stressor-components/stressor-list/StressorList.js"],"names":["React","useState","propTypes","Stressor","NoStressors","StressorTile","StressorList","props","currentTile","setCurrentTile","showAll","setShowAll","displayStressors","data","length","header","map","stressor","index","id","obj","includes","filter","array","isRequired","string"],"mappings":";;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA,OAAO,oBAAP;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAC5B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C,CAD4B,CACuB;;AACnD,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC,CAF4B,CAEkB;;AAE9C,QAAMW,gBAAgB,GAAG,MACtBL,KAAK,CAACM,IAAN,IAAcN,KAAK,CAACM,IAAN,CAAWC,MAA1B,gBACA;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,iBACGP,KAAK,CAACQ,MAAN,iBAAgB;AAAA,mBAAKR,KAAK,CAACQ,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA,cADnB,EAEGR,KAAK,CAACQ,MAAN,iBAAgB;AAAA;AAAA;AAAA;AAAA,cAFnB,eAGE;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA,gCACE;AAAO,UAAA,SAAS,EAAC,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACC,yBAAY,SADb;AAEE,UAAA,SAAS,EAAC,UAFZ;AAGE,UAAA,IAAI,EAAC,UAHP;AAIE,UAAA,IAAI,EAAC,SAJP;AAKE,UAAA,QAAQ,EAAE,MAAMJ,UAAU,CAAC,CAACD,OAAF;AAL5B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAeGH,KAAK,CAACM,IAAN,CAAWG,GAAX,CAAgB,CAACC,QAAD,EAAWC,KAAX,KACf,CAACR,OAAO,IAAIO,QAAQ,CAAC,QAAD,CAAR,KAAqB,GAAjC;AAAA;AAAyC;AACvC,YAAC,YAAD;AACE,MAAA,SAAS,EAAE,cADb;AAEE,MAAA,EAAE,EAAEA,QAAQ,CAAC,IAAD,CAFd;AAGE,MAAA,KAAK,EAAEA,QAAQ,CAAC,OAAD,CAHjB;AAIE,MAAA,IAAI,EAAEA,QAAQ,CAAC,MAAD,CAJhB;AAKE,MAAA,WAAW,EAAEA,QAAQ,CAAC,aAAD,CALvB;AAME,MAAA,UAAU,EAAEA,QAAQ,CAAC,aAAD,CANtB;AAOE,MAAA,aAAa,EAAEA,QAAQ,CAAC,gBAAD,CAPzB;AAQE,MAAA,QAAQ,EAAEA,QAAQ,CAAC,WAAD,CARpB;AASE,MAAA,WAAW,EAAEA,QAAQ,CAAC,aAAD,CATvB;AAUE,MAAA,iBAAiB,EAAEA,QAAQ,CAAC,mBAAD,CAV7B;AAWE,MAAA,OAAO,EAAEE,EAAE,IAAIV,cAAc,CAACU,EAAD;AAX/B,OAAmBD,KAAnB;AAAA;AAAA;AAAA;AAAA,YAFH,CAfH;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,gBAiCA,QAAC,WAAD;AAAa,IAAA,IAAI,EAAEX,KAAK,CAACQ;AAAzB;AAAA;AAAA;AAAA;AAAA,UAlCF;;AAqCA,sBACE;AAAA,cACGP,WAAW,IAAID,KAAK,CAACM,IAAN,CAAWG,GAAX,CAAeI,GAAG,IAAKA,GAAG,CAACD,EAA3B,EAAgCE,QAAhC,CAAyCb,WAAzC,CAAf;AAAA;AAAuE;AACtE,YAAC,QAAD;AACE,MAAA,QAAQ,EAAED,KAAK,CAACM,IAAN,CAAWS,MAAX,CAAkBF,GAAG,IAAKA,GAAG,CAACD,EAAJ,KAASX,WAAnC,CADZ;AAEE,MAAA,MAAM,EAAE,MAAM;AAACC,QAAAA,cAAc,CAAC,EAAD,CAAd;AAAmB;AAFpC;AAAA;AAAA;AAAA;AAAA,YADD,GAKCG,gBAAgB;AANpB;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CApDD;;GAAMN,Y;;KAAAA,Y;AAsDNA,YAAY,CAACJ,SAAb,GAAyB;AACvBW,EAAAA,IAAI,EAAEX,SAAS,CAACqB,KAAV,CAAgBC,UADC;AAEvBT,EAAAA,MAAM,EAAEb,SAAS,CAACuB;AAFK,CAAzB;AAKA,eAAenB,YAAf","sourcesContent":["// component for outputting a list of stressor tiles\r\nimport React, { useState } from 'react'\r\nimport propTypes from 'prop-types'\r\n\r\nimport Stressor from '../stressor/Stressor'\r\nimport NoStressors from '../no-stressors/NoStressors'\r\nimport StressorTile from '../stressor-tile/StressorTile'\r\n\r\nimport './StressorList.css'\r\n\r\nconst StressorList = props => {\r\n  const [currentTile, setCurrentTile] = useState('') // display stressor tile content when clicked\r\n  const [showAll, setShowAll] = useState(false) // whether or not to show hidden stressors\r\n\r\n  const displayStressors = () => (\r\n    (props.data && props.data.length) ? \r\n    <div className='stressor-list'>\r\n      <div className='list-header'>\r\n        {props.header && <h2>{props.header} Stressors</h2>}\r\n        {props.header && <hr/>}\r\n        <div className='showAllCheckbox-container'>{/* render the showall checkbox*/}\r\n          <label className='checkbox-label'>Show All</label>\r\n          <input\r\n           data-testid='showAll'\r\n            className='checkbox'\r\n            type='checkbox'\r\n            name='showAll'\r\n            onChange={() => setShowAll(!showAll)}\r\n          />\r\n        </div>\r\n      </div>\r\n      {props.data.map( (stressor, index) => (\r\n        (showAll || stressor['hidden']==='0') && // display all stressors if showall is selected otherwise show non hidden ones\r\n          <StressorTile key={index}\r\n            className={'stressorTile'}\r\n            id={stressor['id']}\r\n            title={stressor['title']}\r\n            date={stressor['date']}\r\n            description={stressor['description']}\r\n            copingPlan={stressor['coping-plan']}\r\n            anticipatedSL={stressor['anticipated-SL']}\r\n            actualSL={stressor['actual-SL']}\r\n            uncertainty={stressor['uncertainty']}\r\n            uncontrollability={stressor['uncontrollability']}\r\n            onClick={id => setCurrentTile(id)}\r\n          />\r\n      ))}\r\n    </div> :\r\n    <NoStressors type={props.header} />\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      {currentTile && props.data.map(obj => (obj.id)).includes(currentTile) ? // either show a specific stressor tiles content or the entire list of tiles\r\n        <Stressor\r\n          stressor={props.data.filter(obj => (obj.id===currentTile))}\r\n          goBack={() => {setCurrentTile('')}}\r\n        /> : \r\n        displayStressors()\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nStressorList.propTypes = {\r\n  data: propTypes.array.isRequired,\r\n  header: propTypes.string,\r\n}\r\n\r\nexport default StressorList\r\n"]},"metadata":{},"sourceType":"module"}