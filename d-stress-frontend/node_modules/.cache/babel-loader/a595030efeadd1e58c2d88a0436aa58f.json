{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\projects\\\\d-stress-frontend\\\\src\\\\components\\\\stressor-components\\\\stressor-tile\\\\StressorTile.js\";\n// component for rendering the individual stressor tiles\nimport React from 'react';\nimport moment from 'moment';\nimport propTypes from 'prop-types';\nimport './StressorTile.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StressorTile = props => {\n  const stressLevel = // show actual stress level if present otherwise show anticipated stress level\n  props.actualSL ? props.actualSL : props.anticipatedSL;\n  var colour = '';\n\n  if (stressLevel) {\n    if (stressLevel === \"0\") {\n      colour = 'green'; // set the colour of the corner diamond \n    } else if (stressLevel === \"1\") {\n      colour = 'blue';\n    } else if (stressLevel === \"2\") {\n      colour = 'purple';\n    } else if (stressLevel === \"3\") {\n      colour = 'yellow';\n    } else if (stressLevel === \"4\") {\n      colour = 'orange';\n    } else if (stressLevel === \"5\") {\n      colour = 'red';\n    }\n  } // calculate the suitability of a stressor for anticipation\n\n\n  var suitabilityScore = 0;\n\n  if (new Date(props.date) >= new Date(Date.now() + 6.048e+8 * 2)) {\n    suitabilityScore++; // if the stressor is in the distant future, it is less suitable\n  }\n\n  if (stressLevel >= 4) {\n    suitabilityScore++; // if it is particularly stressful, it is not suited for anticiaption\n  }\n\n  if (props.uncertainty && props.uncertainty >= 4) {\n    suitabilityScore++; // if it is highly uncertain, it is unsuitable\n  }\n\n  if (props.uncontrollability && props.uncontrollability >= 4) {\n    suitabilityScore++; // if it is not under the control of the user, it is unsuitable\n  }\n\n  var suitability = '';\n\n  switch (suitabilityScore) {\n    case 0:\n      suitability = 'High';\n      break;\n\n    case 1:\n      suitability = 'Medium';\n      break;\n\n    case 2:\n      suitability = 'Medium';\n      break;\n\n    case 3:\n      suitability = 'Low';\n      break;\n\n    case 4:\n      suitability = 'Low';\n      break;\n\n    default:\n      suitability = 'High';\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.className,\n    onClick: () => {\n      props.onClick(props.id);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      className: \"stressor-tile-title\",\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), stressLevel && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"square\",\n      className: colour\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 75\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 113\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Date: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), moment(props.date).format('Do MMMM YYYY'), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 63\n    }, this), props.description && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Description: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 34\n      }, this), props.description]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }, this), props.copingPlan && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Coping Plan: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 33\n      }, this), props.copingPlan]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Suitability: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), suitability]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_c = StressorTile;\nStressorTile.propTypes = {\n  className: propTypes.string.isRequired,\n  id: propTypes.string.isRequired,\n  title: propTypes.string.isRequired,\n  date: propTypes.string.isRequired,\n  description: propTypes.string,\n  copingPlan: propTypes.string,\n  anticipatedSL: propTypes.string,\n  actualSL: propTypes.string,\n  uncertainty: propTypes.string,\n  uncontrollability: propTypes.string,\n  onClick: propTypes.func.isRequired\n};\nexport default StressorTile;\n\nvar _c;\n\n$RefreshReg$(_c, \"StressorTile\");","map":{"version":3,"sources":["C:/xampp/htdocs/projects/d-stress-frontend/src/components/stressor-components/stressor-tile/StressorTile.js"],"names":["React","moment","propTypes","StressorTile","props","stressLevel","actualSL","anticipatedSL","colour","suitabilityScore","Date","date","now","uncertainty","uncontrollability","suitability","className","onClick","id","title","format","description","copingPlan","string","isRequired","func"],"mappings":"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","sourcesContent":["// component for rendering the individual stressor tiles\r\nimport React from 'react'\r\nimport moment from 'moment'\r\nimport propTypes from 'prop-types'\r\n\r\nimport './StressorTile.css'\r\n\r\nconst StressorTile = props => {\r\n  const stressLevel = // show actual stress level if present otherwise show anticipated stress level\r\n    props.actualSL ?\r\n    props.actualSL :\r\n    props.anticipatedSL\r\n  var colour = ''\r\n\r\n  if (stressLevel) {\r\n    if (stressLevel===\"0\") {\r\n      colour='green' // set the colour of the corner diamond \r\n    } else if (stressLevel===\"1\") {\r\n      colour='blue'\r\n    } else if (stressLevel===\"2\") {\r\n      colour='purple'\r\n    } else if (stressLevel===\"3\") {\r\n      colour='yellow'\r\n    } else if (stressLevel===\"4\") {\r\n      colour='orange'\r\n    } else if (stressLevel===\"5\") {\r\n      colour='red'\r\n    }  \r\n  }\r\n\r\n  // calculate the suitability of a stressor for anticipation\r\n  var suitabilityScore = 0\r\n  if (new Date(props.date) >= new Date(Date.now()+(6.048e+8*2))) {\r\n    suitabilityScore ++ // if the stressor is in the distant future, it is less suitable\r\n  }\r\n  if (stressLevel >= 4) {\r\n    suitabilityScore ++ // if it is particularly stressful, it is not suited for anticiaption\r\n  }\r\n  if (props.uncertainty && props.uncertainty >= 4) {\r\n    suitabilityScore ++ // if it is highly uncertain, it is unsuitable\r\n  }\r\n  if (props.uncontrollability && props.uncontrollability >= 4) {\r\n    suitabilityScore ++ // if it is not under the control of the user, it is unsuitable\r\n  }\r\n  var suitability = ''\r\n  switch (suitabilityScore) {\r\n    case 0: suitability = 'High'\r\n            break\r\n    case 1: suitability = 'Medium'\r\n            break\r\n    case 2: suitability = 'Medium'\r\n            break\r\n    case 3: suitability = 'Low'\r\n            break\r\n    case 4: suitability = 'Low'\r\n            break\r\n    default: suitability = 'High' \r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={props.className}\r\n      onClick={() => {props.onClick(props.id)}}\r\n    >\r\n      <b className='stressor-tile-title'>{props.title}</b>{stressLevel && <div id='square' className={colour}/>}<br/>\r\n      <hr/>\r\n      <b>Date: </b>{moment(props.date).format('Do MMMM YYYY')}<br/>\r\n      {props.description && <div><b>Description: </b>{props.description}</div>}\r\n      {props.copingPlan && <div><b>Coping Plan: </b>{props.copingPlan}</div>}\r\n      {<div><b>Suitability: </b>{suitability}</div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nStressorTile.propTypes = {\r\n    className: propTypes.string.isRequired,\r\n    id: propTypes.string.isRequired,\r\n    title: propTypes.string.isRequired,\r\n    date: propTypes.string.isRequired,\r\n    description: propTypes.string,\r\n    copingPlan: propTypes.string,\r\n    anticipatedSL: propTypes.string,\r\n    actualSL: propTypes.string,\r\n    uncertainty: propTypes.string,\r\n    uncontrollability: propTypes.string,\r\n    onClick: propTypes.func.isRequired,\r\n  }\r\n\r\nexport default StressorTile\r\n"]},"metadata":{},"sourceType":"module"}