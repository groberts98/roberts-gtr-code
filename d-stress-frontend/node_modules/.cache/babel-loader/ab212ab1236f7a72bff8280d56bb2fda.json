{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\projects\\\\d-stress-frontend\\\\src\\\\components\\\\stressor-components\\\\stressor\\\\Stressor.js\",\n    _s = $RefreshSig$();\n\n// component rendering individual stressor\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport propTypes from 'prop-types';\nimport ReactTooltip from 'react-tooltip';\nimport Success from '../../screens/success/Success';\nimport StressorForm from '../stressor-form/StressorForm';\nimport Confirmation from '../../screens/confirmation/Confirmation';\nimport StressorButton from '../../buttons/stressorButton/stressorButton';\nimport backArrow from '../../../resources/backArrow.png';\nimport info from '../../../resources/info.png';\nimport './Stressor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Stressor = props => {\n  _s();\n\n  const [screen, setScreen] = useState('display'); // whether to show the stressor or a confirmation sreen\n\n  const deleteStressor = () => {\n    // function handeling the deletion of stressors\n    const data = {\n      id: props.stressor[0].id\n    };\n\n    if (data) {\n      fetch('https://dstress-backend.herokuapp.com/api/stressor/DeleteStressor.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(() => {\n        console.log('Success');\n        setScreen('success'); // if deletion successful then show success screen\n      }).catch(error => {\n        console.error('Error:', error); // otherwise, log an error and don't change page\n      });\n    } else {\n      console.log('error');\n    }\n  };\n\n  if (screen === 'display') {\n    const stressLevel = // give actual stress level if available\n    props.stressor[0]['actual-SL'] ? props.stressor[0]['actual-SL'] : props.stressor[0]['anticipated-SL'];\n    var colour = '';\n\n    switch (stressLevel) {\n      // set colour of diamond based on stress level\n      case '0':\n        colour = 'green';\n        break;\n\n      case '1':\n        colour = 'blue';\n        break;\n\n      case '2':\n        colour = 'purple';\n        break;\n\n      case '3':\n        colour = 'yellow';\n        break;\n\n      case '4':\n        colour = 'orange';\n        break;\n\n      case '5':\n        colour = 'red';\n        break;\n\n      default:\n        colour = '';\n    }\n\n    var suitabilityScore = 0;\n\n    if (new Date(props.stressor[0]['date']) >= new Date(Date.now() + 6.048e+8 * 2)) {\n      suitabilityScore++;\n    }\n\n    if (stressLevel >= '4') {\n      suitabilityScore++;\n    }\n\n    if (props.stressor[0]['uncertainty'] && props.stressor[0]['uncertainty'] >= '4') {\n      suitabilityScore++;\n    }\n\n    if (props.stressor[0]['uncontrollability'] && props.stressor[0]['uncontrollability'] >= '4') {\n      suitabilityScore++;\n    }\n\n    var suitability = '';\n\n    switch (suitabilityScore) {\n      case 0:\n        suitability = 'High';\n        break;\n\n      case 1:\n        suitability = 'Medium';\n        break;\n\n      case 2:\n        suitability = 'Medium';\n        break;\n\n      case 3:\n        suitability = 'Low';\n        break;\n\n      case 4:\n        suitability = 'Low';\n        break;\n\n      default:\n        suitability = 'High';\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stressor\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => {\n          props.goBack();\n        },\n        src: backArrow,\n        alt: \"back arrow\",\n        className: \"back-arrow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"stressor-name\",\n        children: props.stressor[0]['title']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), stressLevel && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"stressor-square\",\n        className: colour\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 88\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), moment(props.stressor[0]['date']).format('Do MMMM YYYY'), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 80\n      }, this), props.stressor[0]['description'] && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Description: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 51\n        }, this), props.stressor[0]['description']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 46\n      }, this), props.stressor[0]['coping-plan'] && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Coping Plan: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 51\n        }, this), props.stressor[0]['coping-plan']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 46\n      }, this), props.stressor[0]['cp-executed'] && props.stressor[0]['coping-plan'] && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Coping Plan Executed: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 87\n        }, this), props.stressor[0]['cp-executed'] === '1' ? 'Yes' : 'No']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 82\n      }, this), props.stressor[0]['anticipated-SL'] && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Anticipated Stress Level: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 54\n        }, this), props.stressor[0]['anticipated-SL']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 49\n      }, this), props.stressor[0]['actual-SL'] && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Actual Stress Level: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 49\n        }, this), props.stressor[0]['actual-SL']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 44\n      }, this), props.stressor[0]['uncertainty'] && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Stressor Uncertainty: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 51\n        }, this), props.stressor[0]['uncertainty']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 46\n      }, this), props.stressor[0]['uncontrollability'] && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Stressor Uncontrollability: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 57\n        }, this), props.stressor[0]['uncontrollability']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 52\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Suitability: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 14\n        }, this), suitability]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"info-icon\",\n        src: info,\n        alt: \"Info Icon\",\n        \"data-tip\": true,\n        \"data-for\": \"suitablityTip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 99\n      }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n        className: \"tooltip-width\",\n        id: \"suitablityTip\",\n        place: \"right\",\n        type: \"dark\",\n        effect: \"float\",\n        children: \"If a stressor is too stressful, distant, uncertain or out of your control, it may not be suitable for anticipation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StressorButton, {\n        button: \"Edit\",\n        onClick: () => setScreen('edit')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StressorButton, {\n        button: \"Delete\",\n        onClick: () => setScreen('confirmation')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  } else if (screen === 'confirmation') {\n    return /*#__PURE__*/_jsxDEV(Confirmation, {\n      action: \"delete\",\n      cancelFunction: () => setScreen('display'),\n      confrimFunction: () => deleteStressor()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  } else if (screen === 'success') {\n    return /*#__PURE__*/_jsxDEV(Success, {\n      action: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  } else if (screen === 'edit') {\n    // if edit clicked the render the stressor form with data pre-loaded\n    return /*#__PURE__*/_jsxDEV(StressorForm, {\n      id: props.stressor[0]['id'],\n      title: props.stressor[0]['title'],\n      date: props.stressor[0]['date'],\n      description: props.stressor[0]['description'],\n      copingPlan: props.stressor[0]['coping-plan'],\n      cpExecuted: props.stressor[0]['cp-executed'],\n      anticipatedSL: props.stressor[0]['anticipated-SL'],\n      actualSL: props.stressor[0]['actual-SL'],\n      uncertainty: props.stressor[0]['uncertainty'],\n      uncontrollability: props.stressor[0]['uncontrollability'],\n      hidden: props.stressor[0]['hidden'],\n      function: \"Edit\",\n      goBack: () => {\n        setScreen('display');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(Stressor, \"Ygl1phS3r+0nEY1++TaYtJvraEc=\");\n\n_c = Stressor;\nStressor.propTypes = {\n  stressor: propTypes.array.isRequired,\n  //supply stessor data to component\n  goBack: propTypes.func\n};\nStressor.defaultProps = {\n  goBack: () => {}\n};\nexport default Stressor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stressor\");","map":{"version":3,"sources":["C:/xampp/htdocs/projects/d-stress-frontend/src/components/stressor-components/stressor/Stressor.js"],"names":["React","useState","moment","propTypes","ReactTooltip","Success","StressorForm","Confirmation","StressorButton","backArrow","info","Stressor","props","screen","setScreen","deleteStressor","data","id","stressor","fetch","method","headers","body","JSON","stringify","then","console","log","catch","error","stressLevel","colour","suitabilityScore","Date","now","suitability","goBack","format","array","isRequired","func","defaultProps"],"mappings":"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","sourcesContent":["// component rendering individual stressor\r\nimport React, { useState } from 'react'\r\nimport moment from 'moment'\r\nimport propTypes from 'prop-types'\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\nimport Success from '../../screens/success/Success'\r\nimport StressorForm from '../stressor-form/StressorForm'\r\nimport Confirmation from '../../screens/confirmation/Confirmation'\r\nimport StressorButton from '../../buttons/stressorButton/stressorButton'\r\n\r\nimport backArrow from '../../../resources/backArrow.png'\r\nimport info from '../../../resources/info.png'\r\n\r\nimport './Stressor.css'\r\n\r\nconst Stressor = props => {\r\n  const [screen, setScreen] = useState('display') // whether to show the stressor or a confirmation sreen\r\n\r\n  const deleteStressor = () => { // function handeling the deletion of stressors\r\n    const data = {\r\n      id : props.stressor[0].id,\r\n    }\r\n\r\n    if (data) {\r\n      fetch('https://dstress-backend.herokuapp.com/api/stressor/DeleteStressor.php', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n      .then(() => {\r\n        console.log('Success')\r\n        setScreen('success') // if deletion successful then show success screen\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error) // otherwise, log an error and don't change page\r\n      })\r\n    } else {\r\n      console.log('error')\r\n    }\r\n  }\r\n\r\n  if (screen==='display') {\r\n    const stressLevel = // give actual stress level if available\r\n      props.stressor[0]['actual-SL'] ?\r\n      props.stressor[0]['actual-SL'] :\r\n      props.stressor[0]['anticipated-SL']\r\n    var colour = ''\r\n    switch (stressLevel) { // set colour of diamond based on stress level\r\n      case '0': colour='green'\r\n                break\r\n      case '1': colour='blue'\r\n                break\r\n      case '2': colour='purple'\r\n                break\r\n      case '3': colour='yellow'\r\n                break\r\n      case '4': colour='orange'\r\n                break\r\n      case '5': colour='red'\r\n                break\r\n      default : colour=''\r\n    }\r\n\r\n  var suitabilityScore = 0\r\n  if (new Date(props.stressor[0]['date']) >= new Date(Date.now()+(6.048e+8*2))) {\r\n    suitabilityScore ++\r\n  }\r\n  if (stressLevel >= '4') {\r\n    suitabilityScore ++\r\n  }\r\n  if (props.stressor[0]['uncertainty'] && props.stressor[0]['uncertainty'] >= '4') {\r\n    suitabilityScore ++\r\n  }\r\n  if (props.stressor[0]['uncontrollability'] && props.stressor[0]['uncontrollability'] >= '4') {\r\n    suitabilityScore ++\r\n  }\r\n  \r\n  var suitability = ''\r\n  switch (suitabilityScore) {\r\n    case 0: suitability = 'High'\r\n            break\r\n    case 1: suitability = 'Medium'\r\n            break\r\n    case 2: suitability = 'Medium'\r\n            break\r\n    case 3: suitability = 'Low'\r\n            break\r\n    case 4: suitability = 'Low'\r\n            break\r\n    default: suitability = 'High' \r\n  }\r\n  \r\n    return (\r\n      <div className='stressor'>\r\n        <img\r\n          onClick={() => {props.goBack()}}\r\n          src={backArrow}\r\n          alt='back arrow'\r\n          className='back-arrow'\r\n        />\r\n        <h2 className='stressor-name'>{props.stressor[0]['title']}</h2>{stressLevel && <div id='stressor-square' className={colour}/>}\r\n        <hr/>\r\n        <b>Date: </b>{moment(props.stressor[0]['date']).format('Do MMMM YYYY')}<br/>\r\n        {props.stressor[0]['description'] && <div><b>Description: </b>{props.stressor[0]['description']}</div>}\r\n        {props.stressor[0]['coping-plan'] && <div><b>Coping Plan: </b>{props.stressor[0]['coping-plan']}</div>}\r\n        {props.stressor[0]['cp-executed'] && props.stressor[0]['coping-plan'] && <div><b>Coping Plan Executed: </b>{props.stressor[0]['cp-executed'] === '1' ? 'Yes' : 'No'}</div>}\r\n        {props.stressor[0]['anticipated-SL'] && <div><b>Anticipated Stress Level: </b>{props.stressor[0]['anticipated-SL']}</div>}\r\n        {props.stressor[0]['actual-SL'] && <div><b>Actual Stress Level: </b>{props.stressor[0]['actual-SL']}</div>}\r\n        {props.stressor[0]['uncertainty'] && <div><b>Stressor Uncertainty: </b>{props.stressor[0]['uncertainty']}</div>}\r\n        {props.stressor[0]['uncontrollability'] && <div><b>Stressor Uncontrollability: </b>{props.stressor[0]['uncontrollability']}</div>}\r\n        <div><b>Suitability: </b>{suitability}</div>\r\n        <img className='info-icon' src={info} alt='Info Icon' data-tip data-for='suitablityTip' /><br/>\r\n        <ReactTooltip className='tooltip-width' id='suitablityTip' place='right' type='dark' effect='float'>\r\n          If a stressor is too stressful, distant, uncertain or out of your control, it may not be suitable for anticipation.\r\n        </ReactTooltip>\r\n        <StressorButton\r\n          button='Edit'\r\n          onClick={() => setScreen('edit')}\r\n        />\r\n        <StressorButton\r\n          button='Delete'\r\n          onClick={() => setScreen('confirmation')}\r\n        />\r\n        <br/>\r\n        <br/>\r\n      </div>\r\n    )\r\n  } else if (screen==='confirmation') {\r\n    return (\r\n      <Confirmation \r\n        action='delete'\r\n        cancelFunction={() => setScreen('display')}\r\n        confrimFunction={() => deleteStressor()}\r\n      />\r\n    )\r\n  } else if (screen==='success') {\r\n    return (\r\n      <Success \r\n        action='Delete'\r\n      />\r\n    )\r\n  } else if (screen==='edit') { // if edit clicked the render the stressor form with data pre-loaded\r\n    return (\r\n      <StressorForm\r\n        id={props.stressor[0]['id']}\r\n        title={props.stressor[0]['title']}\r\n        date={props.stressor[0]['date']}\r\n        description={props.stressor[0]['description']}\r\n        copingPlan={props.stressor[0]['coping-plan']}\r\n        cpExecuted={props.stressor[0]['cp-executed']}\r\n        anticipatedSL={props.stressor[0]['anticipated-SL']}\r\n        actualSL={props.stressor[0]['actual-SL']}\r\n        uncertainty={props.stressor[0]['uncertainty']}\r\n        uncontrollability={props.stressor[0]['uncontrollability']}\r\n        hidden={props.stressor[0]['hidden']}\r\n        function='Edit'\r\n        goBack={() => {setScreen('display')}}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nStressor.propTypes = {\r\n  stressor: propTypes.array.isRequired, //supply stessor data to component\r\n  goBack: propTypes.func\r\n}\r\n\r\nStressor.defaultProps = {\r\n  goBack: () => {}\r\n}\r\n\r\nexport default Stressor\r\n"]},"metadata":{},"sourceType":"module"}