{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\projects\\\\dissertation\\\\d-stress-frontend\\\\src\\\\components\\\\stressor-components\\\\stressor-form\\\\StressorForm.js\",\n    _s = $RefreshSig$();\n\n// component for rendering the stressor form\nimport React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport ReactTooltip from 'react-tooltip';\nimport DatePicker from 'react-datepicker';\nimport Success from '../../screens/success/Success';\nimport TextInput from '../../inputs/text-input/TextInput';\nimport RangeInput from '../../inputs/range-input/RangeInput';\nimport CheckboxInput from '../../inputs/checkbox-input/CheckboxInput';\nimport StressorButton from '../../buttons/stressorButton/stressorButton';\nimport backArrow from '../../../resources/backArrow.png';\nimport info from '../../../resources/info.png';\nimport './StressorForm.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StressorForm = props => {\n  _s();\n\n  var _props$id, _props$title, _props$description, _props$copingPlan, _props$anticipatedSL, _props$actualSL, _props$uncertainty, _props$uncontrollabil;\n\n  const [id] = useState((_props$id = props.id) !== null && _props$id !== void 0 ? _props$id : ''); // pre load inputs if data supplied\n\n  const [title, setTitle] = useState((_props$title = props.title) !== null && _props$title !== void 0 ? _props$title : '');\n  const [date, setDate] = useState(props.date ? new Date(props.date) : new Date());\n  const [description, setDescription] = useState((_props$description = props.description) !== null && _props$description !== void 0 ? _props$description : '');\n  const [copingPlan, setCopingPlan] = useState((_props$copingPlan = props.copingPlan) !== null && _props$copingPlan !== void 0 ? _props$copingPlan : '');\n  const [cpExecuted, setCPExecuted] = useState(props.cpExecuted === '1' ? true : false);\n  const [anticipatedSL, setAnticipatedSL] = useState((_props$anticipatedSL = props.anticipatedSL) !== null && _props$anticipatedSL !== void 0 ? _props$anticipatedSL : '2');\n  const [actualSL, setActualSL] = useState((_props$actualSL = props.actualSL) !== null && _props$actualSL !== void 0 ? _props$actualSL : '2');\n  const [uncertainty, setUncertainty] = useState((_props$uncertainty = props.uncertainty) !== null && _props$uncertainty !== void 0 ? _props$uncertainty : '2');\n  const [uncontrollability, setUncontrollability] = useState((_props$uncontrollabil = props.uncontrollability) !== null && _props$uncontrollabil !== void 0 ? _props$uncontrollabil : '2');\n  const [hidden, setHidden] = useState(props.hidden === '1' ? true : false);\n  const [screen, setScreen] = useState('formScreen');\n  const currentDate = new Date();\n  var dateColour = ''; // set colour of date input box based on how far in future selected date is\n\n  if (date <= new Date(Date.now() + 6.048e+8 * 1)) {\n    dateColour = 'green';\n  } else if (date <= new Date(Date.now() + 6.048e+8 * 2)) {\n    dateColour = 'orange';\n  } else {\n    dateColour = 'red';\n  }\n\n  var anticipatedSLColour = '';\n\n  switch (anticipatedSL) {\n    // colour stress level input box based on input\n    case '0':\n      anticipatedSLColour = 'green';\n      break;\n\n    case '1':\n      anticipatedSLColour = 'blue';\n      break;\n\n    case '2':\n      anticipatedSLColour = 'purple';\n      break;\n\n    case '3':\n      anticipatedSLColour = 'yellow';\n      break;\n\n    case '4':\n      anticipatedSLColour = 'orange';\n      break;\n\n    case '5':\n      anticipatedSLColour = 'red';\n      break;\n\n    default:\n      anticipatedSLColour = '';\n  }\n\n  var actualSLColour = '';\n\n  switch (actualSL) {\n    // colour stress level input box based on input\n    case '0':\n      actualSLColour = 'green';\n      break;\n\n    case '1':\n      actualSLColour = 'blue';\n      break;\n\n    case '2':\n      actualSLColour = 'purple';\n      break;\n\n    case '3':\n      actualSLColour = 'yellow';\n      break;\n\n    case '4':\n      actualSLColour = 'orange';\n      break;\n\n    case '5':\n      actualSLColour = 'red';\n      break;\n\n    default:\n      actualSLColour = '';\n  }\n\n  useEffect(() => {\n    ReactTooltip.rebuild();\n  });\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const data = {\n      // data to send to backend \n      id: id !== null && id !== void 0 ? id : undefined,\n      // undefined if its a new stressor\n      title: title,\n      date: date,\n      description: description,\n      copingPlan: copingPlan,\n      cpExecuted: date < currentDate && copingPlan !== '' ? cpExecuted : undefined,\n      anticipatedSL: anticipatedSL,\n      actualSL: date < currentDate ? actualSL : undefined,\n      uncertainty: date > currentDate ? uncertainty : undefined,\n      uncontrollability: date > currentDate ? uncontrollability : undefined,\n      hidden: hidden\n    };\n\n    if (title && date) {\n      // title and date needed to save stressor\n      fetch('https://dstress-backend.herokuapp.com/api/stressor/' + props.function + 'Stressor.php', {\n        // either edit or save stressor\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(() => {\n        console.log('Success');\n        setScreen('successScreen');\n      }).catch(error => {\n        console.error('Error:', error);\n        setScreen('failScreen');\n      });\n    } else {\n      console.log('error');\n      setScreen('failScreen');\n    }\n  };\n\n  const form = showFail =>\n  /*#__PURE__*/\n  // returns stressor form\n  _jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [props.goBack && /*#__PURE__*/_jsxDEV(\"img\", {\n      onClick: () => {\n        props.goBack();\n      },\n      src: backArrow,\n      alt: \"back arrow\",\n      className: \"back-arrow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"stressor-form\",\n      autoComplete: \"off\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), showFail && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please fill all fields marked with *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        id: \"title\",\n        label: \"Title *\",\n        value: title,\n        onChange: title => setTitle(title)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"info-icon\",\n        src: info,\n        alt: \"Info Icon\",\n        \"data-tip\": true,\n        \"data-for\": \"dateTip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 93\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        className: \"date-picker\",\n        id: dateColour,\n        dateFormat: \"dd/MM/yyyy\",\n        selected: date,\n        onChange: date => setDate(date)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        id: \"description\",\n        label: \"Description\",\n        value: description,\n        onChange: description => setDescription(description)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        id: \"copingPlan\",\n        label: \"Coping Plan\",\n        value: copingPlan,\n        onChange: copingPlan => setCopingPlan(copingPlan)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), date < currentDate && copingPlan !== '' && /*#__PURE__*/_jsxDEV(CheckboxInput, {\n        label: \"Coping Plan Executed\",\n        name: \"cpExecuted\",\n        checked: cpExecuted,\n        onChange: () => setCPExecuted(!cpExecuted)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RangeInput, {\n        id: \"anticipatedSL\",\n        label: \"Anticipated Stress Level\",\n        value: anticipatedSL,\n        onChange: anticipatedSL => setAnticipatedSL(anticipatedSL),\n        min: \"0\",\n        max: \"5\",\n        colour: anticipatedSLColour\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), date < currentDate && /*#__PURE__*/_jsxDEV(RangeInput, {\n        id: \"actualSL\",\n        label: \"Actual Stress Level\",\n        value: actualSL,\n        onChange: actualSL => setActualSL(actualSL),\n        min: \"0\",\n        max: \"5\",\n        colour: actualSLColour\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this), date > currentDate && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"info-icon\",\n          src: info,\n          alt: \"Info Icon\",\n          \"data-tip\": true,\n          \"data-for\": \"uncertaintyTip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(RangeInput, {\n          id: \"uncertainty\",\n          label: \"Stressor Uncertainty\",\n          value: uncertainty,\n          onChange: uncertainty => setUncertainty(uncertainty),\n          min: \"0\",\n          max: \"5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), date > currentDate && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"info-icon\",\n          src: info,\n          alt: \"Info Icon\",\n          \"data-tip\": true,\n          \"data-for\": \"uncontrollabilityTip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(RangeInput, {\n          id: \"uncontrollability\",\n          label: \"Stressor uncontrollability\",\n          value: uncontrollability,\n          onChange: uncontrollability => setUncontrollability(uncontrollability),\n          min: \"0\",\n          max: \"5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"info-icon\",\n        src: info,\n        alt: \"Info Icon\",\n        \"data-tip\": true,\n        \"data-for\": \"hiddenTip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CheckboxInput, {\n        label: \"Hidden\",\n        name: \"hidden\",\n        checked: hidden,\n        onChange: () => setHidden(!hidden)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StressorButton, {\n        button: \"Save\",\n        value: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n      className: \"tooltip-width\",\n      id: \"dateTip\",\n      place: \"top\",\n      type: \"dark\",\n      effect: \"float\",\n      children: \"The further in the future a stressor is, the less suitable it is for anticipation. The colours represent suitability of selected date\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n      className: \"tooltip-width\",\n      id: \"hiddenTip\",\n      place: \"top\",\n      type: \"dark\",\n      effect: \"float\",\n      children: \"Not all stressors are suitable to anticiapte; you may whish to hide a stressor if it is particularly stressful\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n      className: \"tooltip-width\",\n      id: \"uncertaintyTip\",\n      place: \"top\",\n      type: \"dark\",\n      effect: \"float\",\n      children: \"The higher the uncertainty of the details surrounding a stressor, the less suitable it is for anticiaption\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n      className: \"tooltip-width\",\n      id: \"uncontrollabilityTip\",\n      place: \"top\",\n      type: \"dark\",\n      effect: \"float\",\n      children: \"The less control you have over a stressor, the less suitable it is for anticiaption\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n\n  if (screen === 'formScreen') {\n    // render the form without red input instructions\n    return form(false);\n  } else if (screen === 'successScreen') {\n    // render success component\n    return /*#__PURE__*/_jsxDEV(Success, {\n      action: props.function\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this);\n  } else if (screen === 'failScreen') {\n    // render with instructions\n    return form(true);\n  }\n};\n\n_s(StressorForm, \"ePAynJ+n02fDmkP/IOmsjSNvvU8=\");\n\n_c = StressorForm;\nStressorForm.propTypes = {\n  id: propTypes.string,\n  title: propTypes.string,\n  date: propTypes.string,\n  description: propTypes.string,\n  copingPlan: propTypes.string,\n  cpExecuted: propTypes.string,\n  anticipatedSL: propTypes.string,\n  actualSL: propTypes.string,\n  uncertainty: propTypes.string,\n  uncontrollability: propTypes.string,\n  hidden: propTypes.string,\n  function: propTypes.string.isRequired,\n  goBack: propTypes.func\n};\nexport default StressorForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"StressorForm\");","map":{"version":3,"sources":["C:/xampp/htdocs/projects/dissertation/d-stress-frontend/src/components/stressor-components/stressor-form/StressorForm.js"],"names":["React","useState","useEffect","propTypes","ReactTooltip","DatePicker","Success","TextInput","RangeInput","CheckboxInput","StressorButton","backArrow","info","StressorForm","props","id","title","setTitle","date","setDate","Date","description","setDescription","copingPlan","setCopingPlan","cpExecuted","setCPExecuted","anticipatedSL","setAnticipatedSL","actualSL","setActualSL","uncertainty","setUncertainty","uncontrollability","setUncontrollability","hidden","setHidden","screen","setScreen","currentDate","dateColour","now","anticipatedSLColour","actualSLColour","rebuild","handleSubmit","event","preventDefault","data","undefined","fetch","function","method","headers","body","JSON","stringify","then","console","log","catch","error","form","showFail","goBack","string","isRequired","func"],"mappings":"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","sourcesContent":["// component for rendering the stressor form\r\nimport React, { useState, useEffect } from 'react'\r\nimport propTypes from 'prop-types'\r\nimport ReactTooltip from 'react-tooltip'\r\nimport DatePicker from 'react-datepicker'\r\n\r\nimport Success from '../../screens/success/Success'\r\nimport TextInput from '../../inputs/text-input/TextInput'\r\nimport RangeInput from '../../inputs/range-input/RangeInput'\r\nimport CheckboxInput from '../../inputs/checkbox-input/CheckboxInput'\r\nimport StressorButton from '../../buttons/stressorButton/stressorButton'\r\n\r\nimport backArrow from '../../../resources/backArrow.png'\r\nimport info from '../../../resources/info.png'\r\n\r\nimport './StressorForm.css'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\nconst StressorForm = props => {\r\n  const [id] = useState(props.id ?? '') // pre load inputs if data supplied\r\n  const [title, setTitle] = useState(props.title ?? '')\r\n  const [date, setDate] = useState(props.date ? new Date(props.date) : new Date())\r\n  const [description, setDescription] = useState(props.description ?? '')\r\n  const [copingPlan, setCopingPlan] = useState(props.copingPlan ?? '')\r\n  const [cpExecuted, setCPExecuted] = useState(props.cpExecuted==='1' ? true : false)\r\n  const [anticipatedSL, setAnticipatedSL] = useState(props.anticipatedSL ?? '2')\r\n  const [actualSL, setActualSL] = useState(props.actualSL ?? '2')\r\n  const [uncertainty, setUncertainty] = useState(props.uncertainty ?? '2')\r\n  const [uncontrollability, setUncontrollability] = useState(props.uncontrollability ?? '2')\r\n  const [hidden, setHidden] = useState(props.hidden==='1' ? true : false)\r\n  const [screen, setScreen] = useState('formScreen')\r\n  const currentDate = new Date()\r\n\r\n  var dateColour = '' // set colour of date input box based on how far in future selected date is\r\n  if (date<=new Date(Date.now()+(6.048e+8 * 1))) {\r\n    dateColour = 'green'\r\n  } else if (date<=new Date(Date.now()+(6.048e+8*2))) {\r\n    dateColour = 'orange'\r\n  } else {\r\n    dateColour = 'red'\r\n  }\r\n\r\n  var anticipatedSLColour = ''\r\n  switch (anticipatedSL) { // colour stress level input box based on input\r\n    case '0': anticipatedSLColour = 'green'\r\n            break\r\n    case '1': anticipatedSLColour = 'blue'\r\n            break\r\n    case '2': anticipatedSLColour = 'purple'\r\n            break\r\n    case '3': anticipatedSLColour = 'yellow'\r\n            break\r\n    case '4': anticipatedSLColour = 'orange'\r\n            break\r\n    case '5': anticipatedSLColour = 'red'\r\n            break\r\n    default: anticipatedSLColour = ''\r\n  }\r\n\r\n  var actualSLColour = ''\r\n  switch (actualSL) { // colour stress level input box based on input\r\n    case '0': actualSLColour = 'green'\r\n            break\r\n    case '1': actualSLColour = 'blue'\r\n            break\r\n    case '2': actualSLColour = 'purple'\r\n            break\r\n    case '3': actualSLColour = 'yellow'\r\n            break\r\n    case '4': actualSLColour = 'orange'\r\n            break\r\n    case '5': actualSLColour = 'red'\r\n            break\r\n    default: actualSLColour = ''\r\n  }\r\n\r\n  useEffect(() => {\r\n    ReactTooltip.rebuild()\r\n  })\r\n\r\n  const handleSubmit = event => {\r\n      event.preventDefault()\r\n\r\n      const data = { // data to send to backend \r\n        id : id ?? undefined, // undefined if its a new stressor\r\n        title : title,\r\n        date : date,\r\n        description : description,\r\n        copingPlan : copingPlan,\r\n        cpExecuted: date<currentDate && copingPlan!=='' ?  cpExecuted : undefined,\r\n        anticipatedSL: anticipatedSL,\r\n        actualSL: date<currentDate ? actualSL : undefined,\r\n        uncertainty: date>currentDate ? uncertainty : undefined,\r\n        uncontrollability: date>currentDate ? uncontrollability : undefined,\r\n        hidden: hidden\r\n      }\r\n\r\n      if (title && date) { // title and date needed to save stressor\r\n        fetch('https://dstress-backend.herokuapp.com/api/stressor/' + props.function + 'Stressor.php', { // either edit or save stressor\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(data),\r\n        })\r\n        .then(() => {\r\n          console.log('Success')\r\n          setScreen('successScreen')\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error:', error)\r\n          setScreen('failScreen')\r\n        })\r\n      } else {\r\n        console.log('error')\r\n        setScreen('failScreen')\r\n      }\r\n  }\r\n\r\n  const form = showFail => ( // returns stressor form\r\n    <div className='form-container'>\r\n      {props.goBack &&\r\n        <img\r\n          onClick={() => {props.goBack()}}\r\n          src={backArrow}\r\n          alt='back arrow'\r\n          className='back-arrow'\r\n        />\r\n      }\r\n      <form className='stressor-form' autoComplete=\"off\" onSubmit={handleSubmit}>\r\n        <br/>\r\n        {showFail && <p>Please fill all fields marked with *</p>}\r\n        <TextInput\r\n          id='title'\r\n          label='Title *'\r\n          value={title}\r\n          onChange={title => setTitle(title)}\r\n        />\r\n        <img className='info-icon' src={info} alt='Info Icon' data-tip data-for='dateTip' /><br/>\r\n        <DatePicker\r\n          className='date-picker'\r\n          id={dateColour}\r\n          dateFormat='dd/MM/yyyy'\r\n          selected={date} \r\n          onChange={date => setDate(date)}\r\n        />\r\n        <TextInput\r\n          id='description'\r\n          label='Description'\r\n          value={description}\r\n          onChange={description => setDescription(description)}\r\n        />\r\n        <TextInput\r\n          id='copingPlan'\r\n          label='Coping Plan'\r\n          value={copingPlan}\r\n          onChange={copingPlan => setCopingPlan(copingPlan)}\r\n        />\r\n        {date<currentDate && copingPlan!=='' &&\r\n          <CheckboxInput\r\n            label='Coping Plan Executed'\r\n            name='cpExecuted'\r\n            checked={cpExecuted}\r\n            onChange={() => setCPExecuted(!cpExecuted)}\r\n          />\r\n        }\r\n        <RangeInput\r\n          id='anticipatedSL'\r\n          label='Anticipated Stress Level'\r\n          value={anticipatedSL}\r\n          onChange={anticipatedSL => setAnticipatedSL(anticipatedSL)}\r\n          min='0'\r\n          max='5'\r\n          colour={anticipatedSLColour}\r\n        />\r\n        {date<currentDate &&\r\n          <RangeInput\r\n            id='actualSL'\r\n            label='Actual Stress Level'\r\n            value={actualSL}\r\n            onChange={actualSL => setActualSL(actualSL)}\r\n            min='0'\r\n            max='5'\r\n            colour={actualSLColour}\r\n          />\r\n        }\r\n        {date>currentDate &&\r\n          <div>\r\n            <img className='info-icon' src={info} alt='Info Icon' data-tip data-for='uncertaintyTip' />\r\n            <RangeInput\r\n              id='uncertainty'\r\n              label='Stressor Uncertainty'\r\n              value={uncertainty}\r\n              onChange={uncertainty => setUncertainty(uncertainty)}\r\n              min='0'\r\n              max='5'\r\n            />\r\n          </div>\r\n        }\r\n        {date>currentDate &&\r\n          <div>\r\n            <img className='info-icon' src={info} alt='Info Icon' data-tip data-for='uncontrollabilityTip' />\r\n            <RangeInput\r\n              id='uncontrollability'\r\n              label='Stressor uncontrollability'\r\n              value={uncontrollability}\r\n              onChange={uncontrollability => setUncontrollability(uncontrollability)}\r\n              min='0'\r\n              max='5'\r\n            />\r\n          </div>\r\n        }\r\n        <img className='info-icon' src={info} alt='Info Icon' data-tip data-for='hiddenTip' />\r\n        <CheckboxInput\r\n          label='Hidden'\r\n          name='hidden'\r\n          checked={hidden}\r\n          onChange={() => setHidden(!hidden)}\r\n        />\r\n        <StressorButton button='Save' value='submit'/>\r\n      </form>\r\n      <ReactTooltip className='tooltip-width' id='dateTip' place='top' type='dark' effect='float'>\r\n        The further in the future a stressor is, the less suitable it is for anticipation. The colours represent suitability of selected date\r\n      </ReactTooltip>\r\n      <ReactTooltip className='tooltip-width' id='hiddenTip' place='top' type='dark' effect='float'>\r\n        Not all stressors are suitable to anticiapte; you may whish to hide a stressor if it is particularly stressful \r\n      </ReactTooltip>\r\n      <ReactTooltip className='tooltip-width' id='uncertaintyTip' place='top' type='dark' effect='float'>\r\n        The higher the uncertainty of the details surrounding a stressor, the less suitable it is for anticiaption\r\n      </ReactTooltip>\r\n      <ReactTooltip className='tooltip-width' id='uncontrollabilityTip' place='top' type='dark' effect='float'>\r\n        The less control you have over a stressor, the less suitable it is for anticiaption\r\n      </ReactTooltip>\r\n      <br/>\r\n      <br/>\r\n    </div>\r\n  )\r\n\r\n  if (screen==='formScreen') { // render the form without red input instructions\r\n    return(form(false))\r\n  } else if (screen==='successScreen') { // render success component\r\n    return (\r\n      <Success\r\n        action={props.function}\r\n      />\r\n    )\r\n  } else if (screen==='failScreen') { // render with instructions\r\n    return (form(true))\r\n  }\r\n}\r\n\r\nStressorForm.propTypes = {\r\n  id: propTypes.string,\r\n  title: propTypes.string,\r\n  date: propTypes.string,\r\n  description: propTypes.string,\r\n  copingPlan: propTypes.string,\r\n  cpExecuted: propTypes.string,\r\n  anticipatedSL: propTypes.string,\r\n  actualSL: propTypes.string,\r\n  uncertainty: propTypes.string,\r\n  uncontrollability: propTypes.string,\r\n  hidden: propTypes.string,\r\n  function: propTypes.string.isRequired,\r\n  goBack: propTypes.func\r\n}\r\n\r\nexport default StressorForm\r\n"]},"metadata":{},"sourceType":"module"}