{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\projects\\\\dstress\\\\src\\\\components\\\\insights-components\\\\insight\\\\Insight.js\",\n    _s = $RefreshSig$();\n\n// component that handles the rendering of an insight\nimport React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport BarChart from '../charts/barChart/BarChart';\nimport PieChart from '../charts/pieChart/PieChart';\nimport LineChart from '../charts/lineChart/LineChart';\nimport backArrow from '../../../resources/backArrow.png';\nimport './Insight.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Insight = props => {\n  _s();\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // load in all stress data when viewing an insight\n    async function fetchData() {\n      try {\n        const response = await fetch(`https://dstress-backend.herokuapp.com/api/stressor/GetStressor.php?id=&filter=`);\n\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n\n        setData(await response.json());\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchData();\n  }, []); //Get data for analytics page\n\n  const dates = data.map(stressor => stressor['date']);\n  const titles = data.map(stressor => stressor['title']);\n  const actualSLs = data.map(stressor => stressor['actual-SL']);\n  const ancticipatedSLs = data.map(stressor => stressor['anticipated-SL']);\n  const actualSLsHidden = data.filter(stressor => stressor['hidden'] !== '1').map(stressor => stressor['actual-SL']);\n  const ancticipatedSLsHidden = data.filter(stressor => stressor['hidden'] !== '1').map(stressor => stressor['anticipated-SL']);\n  const numberHidden = data.map(stressor => stressor['hidden']).filter(a => a === '1').length;\n  const stressLevels = [];\n\n  for (let i = 0; i <= 5; i++) {\n    // get the number of stressors of each stress level\n    stressLevels.push(data.filter(stressor => stressor['actual-SL'] === '' + i).length);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"insight\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      onClick: () => {\n        props.goBack();\n      },\n      src: backArrow,\n      alt: \"back arrow\",\n      className: \"back-arrow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), (() => {\n      switch (props.chartType) {\n        // render differnt charts based on the type of insight being rendered\n        case 'bar':\n          return /*#__PURE__*/_jsxDEV(BarChart, {\n            dataPack1: actualSLs.slice(0, 10) // get 10 most recent data entries\n            ,\n            dataPack2: ancticipatedSLs.slice(0, 10),\n            titles: titles.slice(0, 10)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this);\n\n        case 'pie':\n          return /*#__PURE__*/_jsxDEV(PieChart, {\n            titles: ['0', '1', '2', '3', '4', '5'] // graph showing number of stressors of each stress level\n            ,\n            dataPack: stressLevels\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this);\n\n        case 'line':\n          return /*#__PURE__*/_jsxDEV(LineChart, {\n            dataPack1: actualSLs,\n            dataPack2: ancticipatedSLs,\n            dates: dates\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this);\n\n        case 'stats':\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Number of stressors: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this), data.length, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 56\n            }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Number Hidden: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this), numberHidden, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 51\n            }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Average actual stress level: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this), (actualSLs.filter(a => !!a).reduce((a, b) => parseInt(a) + parseInt(b), 0) / actualSLs.filter(a => !!a).length).toFixed(2), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 171\n            }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Average anticipated stress level: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this), (ancticipatedSLsHidden.filter(a => !!a).reduce((a, b) => parseInt(a) + parseInt(b), 0) / ancticipatedSLs.filter(a => !!a).length).toFixed(2), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 194\n            }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Average actual stress level when hidden: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this), (actualSLsHidden.filter(a => !!a).reduce((a, b) => parseInt(a) + parseInt(b), 0) / actualSLs.filter(a => !!a).length).toFixed(2), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 189\n            }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Average anticipated stress level when hidden: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this), (ancticipatedSLs.filter(a => !!a).reduce((a, b) => parseInt(a) + parseInt(b), 0) / ancticipatedSLs.filter(a => !!a).length).toFixed(2), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 200\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this);\n\n        default:\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 28\n          }, this);\n      }\n    })(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), props.description && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 52\n      }, this), props.description]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Insight, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = Insight;\nInsight.propTypes = {\n  title: propTypes.string,\n  description: propTypes.string,\n  chartType: propTypes.string.isRequired,\n  goBack: propTypes.func\n};\nInsight.defaultProps = {\n  title: 'Insight',\n  description: 'Insight description',\n  goBack: () => {}\n};\nexport default Insight;\n\nvar _c;\n\n$RefreshReg$(_c, \"Insight\");","map":{"version":3,"sources":["C:/xampp/htdocs/projects/dstress/src/components/insights-components/insight/Insight.js"],"names":["React","useState","useEffect","propTypes","BarChart","PieChart","LineChart","backArrow","Insight","props","data","setData","fetchData","response","fetch","ok","Error","statusText","json","error","console","log","dates","map","stressor","titles","actualSLs","ancticipatedSLs","actualSLsHidden","filter","ancticipatedSLsHidden","numberHidden","a","length","stressLevels","i","push","goBack","title","chartType","slice","reduce","b","parseInt","toFixed","description","string","isRequired","func","defaultProps"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AAEA,OAAOC,SAAP,MAAsB,kCAAtB;AAEA,OAAO,eAAP;;;AAEA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AAAA;;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAAE;AAChB,mBAAeU,SAAf,GAA2B;AACzB,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,gFAAF,CAA5B;;AACA,YAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,gBAAMC,KAAK,CAACH,QAAQ,CAACI,UAAV,CAAX;AACD;;AACDN,QAAAA,OAAO,CAAC,MAAME,QAAQ,CAACK,IAAT,EAAP,CAAP;AACD,OAND,CAME,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AACDP,IAAAA,SAAS;AACV,GAbQ,EAaN,EAbM,CAAT,CAHuB,CAkBvB;;AACA,QAAMU,KAAK,GAAGZ,IAAI,CAACa,GAAL,CAASC,QAAQ,IAAIA,QAAQ,CAAC,MAAD,CAA7B,CAAd;AACA,QAAMC,MAAM,GAAGf,IAAI,CAACa,GAAL,CAASC,QAAQ,IAAIA,QAAQ,CAAC,OAAD,CAA7B,CAAf;AACA,QAAME,SAAS,GAAGhB,IAAI,CAACa,GAAL,CAASC,QAAQ,IAAIA,QAAQ,CAAC,WAAD,CAA7B,CAAlB;AACA,QAAMG,eAAe,GAAGjB,IAAI,CAACa,GAAL,CAASC,QAAQ,IAAIA,QAAQ,CAAC,gBAAD,CAA7B,CAAxB;AACA,QAAMI,eAAe,GAAGlB,IAAI,CAACmB,MAAL,CAAYL,QAAQ,IAAIA,QAAQ,CAAC,QAAD,CAAR,KAAqB,GAA7C,EAAkDD,GAAlD,CAAsDC,QAAQ,IAAIA,QAAQ,CAAC,WAAD,CAA1E,CAAxB;AACA,QAAMM,qBAAqB,GAAGpB,IAAI,CAACmB,MAAL,CAAYL,QAAQ,IAAIA,QAAQ,CAAC,QAAD,CAAR,KAAqB,GAA7C,EAAkDD,GAAlD,CAAsDC,QAAQ,IAAIA,QAAQ,CAAC,gBAAD,CAA1E,CAA9B;AACA,QAAMO,YAAY,GAAGrB,IAAI,CAACa,GAAL,CAASC,QAAQ,IAAIA,QAAQ,CAAC,QAAD,CAA7B,EAAyCK,MAAzC,CAAgDG,CAAC,IAAIA,CAAC,KAAG,GAAzD,EAA8DC,MAAnF;AACA,QAAMC,YAAY,GAAG,EAArB;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,IAAE,CAAjB,EAAoBA,CAAC,EAArB,EAAyB;AAAE;AACzBD,IAAAA,YAAY,CAACE,IAAb,CAAkB1B,IAAI,CAACmB,MAAL,CAAaL,QAAD,IAAcA,QAAQ,CAAC,WAAD,CAAR,KAA0B,KAAKW,CAAzD,EAA4DF,MAA9E;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AACE,MAAA,OAAO,EAAE,MAAM;AAACxB,QAAAA,KAAK,CAAC4B,MAAN;AAAe,OADjC;AAEE,MAAA,GAAG,EAAE9B,SAFP;AAGE,MAAA,GAAG,EAAC,YAHN;AAIE,MAAA,SAAS,EAAC;AAJZ;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAA,gBAAKE,KAAK,CAAC6B;AAAX;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAA;AAAA;AAAA;AAAA,YARF,EASG,CAAC,MAAM;AACN,cAAQ7B,KAAK,CAAC8B,SAAd;AAA2B;AACzB,aAAK,KAAL;AAAY,8BACV,QAAC,QAAD;AACE,YAAA,SAAS,EAAEb,SAAS,CAACc,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,CADb,CACqC;AADrC;AAEE,YAAA,SAAS,EAAEb,eAAe,CAACa,KAAhB,CAAsB,CAAtB,EAAyB,EAAzB,CAFb;AAGE,YAAA,MAAM,EAAEf,MAAM,CAACe,KAAP,CAAa,CAAb,EAAgB,EAAhB;AAHV;AAAA;AAAA;AAAA;AAAA,kBADU;;AAOZ,aAAK,KAAL;AAAY,8BACV,QAAC,QAAD;AACE,YAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CADV,CAC0C;AAD1C;AAEE,YAAA,QAAQ,EAAEN;AAFZ;AAAA;AAAA;AAAA;AAAA,kBADU;;AAMZ,aAAK,MAAL;AAAa,8BACX,QAAC,SAAD;AACE,YAAA,SAAS,EAAER,SADb;AAEE,YAAA,SAAS,EAAEC,eAFb;AAGE,YAAA,KAAK,EAAEL;AAHT;AAAA;AAAA;AAAA;AAAA,kBADW;;AAOb,aAAK,OAAL;AAAc,8BACZ;AAAK,YAAA,SAAS,EAAC,OAAf;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAC+BZ,IAAI,CAACuB,MADpC,eAC2C;AAAA;AAAA;AAAA;AAAA,oBAD3C,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAEyBF,YAFzB,eAEsC;AAAA;AAAA;AAAA;AAAA,oBAFtC,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,EAGuC,CAACL,SAAS,CAACG,MAAV,CAAiBG,CAAC,IAAI,CAAC,CAACA,CAAxB,EAA2BS,MAA3B,CAAkC,CAACT,CAAD,EAAIU,CAAJ,KAAUC,QAAQ,CAACX,CAAD,CAAR,GAAYW,QAAQ,CAACD,CAAD,CAAhE,EAAqE,CAArE,IAAwEhB,SAAS,CAACG,MAAV,CAAiBG,CAAC,IAAI,CAAC,CAACA,CAAxB,EAA2BC,MAApG,EAA4GW,OAA5G,CAAoH,CAApH,CAHvC,eAG8J;AAAA;AAAA;AAAA;AAAA,oBAH9J,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,EAI4C,CAACd,qBAAqB,CAACD,MAAtB,CAA6BG,CAAC,IAAI,CAAC,CAACA,CAApC,EAAuCS,MAAvC,CAA8C,CAACT,CAAD,EAAIU,CAAJ,KAAUC,QAAQ,CAACX,CAAD,CAAR,GAAYW,QAAQ,CAACD,CAAD,CAA5E,EAAiF,CAAjF,IAAoFf,eAAe,CAACE,MAAhB,CAAuBG,CAAC,IAAI,CAAC,CAACA,CAA9B,EAAiCC,MAAtH,EAA8HW,OAA9H,CAAsI,CAAtI,CAJ5C,eAIqL;AAAA;AAAA;AAAA;AAAA,oBAJrL,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,EAKmD,CAAChB,eAAe,CAACC,MAAhB,CAAuBG,CAAC,IAAI,CAAC,CAACA,CAA9B,EAAiCS,MAAjC,CAAwC,CAACT,CAAD,EAAIU,CAAJ,KAAUC,QAAQ,CAACX,CAAD,CAAR,GAAYW,QAAQ,CAACD,CAAD,CAAtE,EAA2E,CAA3E,IAA8EhB,SAAS,CAACG,MAAV,CAAiBG,CAAC,IAAI,CAAC,CAACA,CAAxB,EAA2BC,MAA1G,EAAkHW,OAAlH,CAA0H,CAA1H,CALnD,eAKgL;AAAA;AAAA;AAAA;AAAA,oBALhL,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,EAMwD,CAACjB,eAAe,CAACE,MAAhB,CAAuBG,CAAC,IAAI,CAAC,CAACA,CAA9B,EAAiCS,MAAjC,CAAwC,CAACT,CAAD,EAAIU,CAAJ,KAAUC,QAAQ,CAACX,CAAD,CAAR,GAAYW,QAAQ,CAACD,CAAD,CAAtE,EAA2E,CAA3E,IAA8Ef,eAAe,CAACE,MAAhB,CAAuBG,CAAC,IAAI,CAAC,CAACA,CAA9B,EAAiCC,MAAhH,EAAwHW,OAAxH,CAAgI,CAAhI,CANxD,eAM2L;AAAA;AAAA;AAAA;AAAA,oBAN3L;AAAA;AAAA;AAAA;AAAA;AAAA,kBADY;;AAUd;AAAS,8BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAR;AA/BX;AAiCD,KAlCA,GATH,eA4CE;AAAA;AAAA;AAAA;AAAA,YA5CF,EA6CGnC,KAAK,CAACoC,WAAN,iBAAqB;AAAA,8BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAL,eAAuB;AAAA;AAAA;AAAA;AAAA,cAAvB,EAA6BpC,KAAK,CAACoC,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,YA7CxB,eA8CE;AAAA;AAAA;AAAA;AAAA,YA9CF,eA+CE;AAAA;AAAA;AAAA;AAAA,YA/CF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmDD,CAlFD;;GAAMrC,O;;KAAAA,O;AAoFNA,OAAO,CAACL,SAAR,GAAoB;AAClBmC,EAAAA,KAAK,EAAEnC,SAAS,CAAC2C,MADC;AAElBD,EAAAA,WAAW,EAAE1C,SAAS,CAAC2C,MAFL;AAGlBP,EAAAA,SAAS,EAAEpC,SAAS,CAAC2C,MAAV,CAAiBC,UAHV;AAIlBV,EAAAA,MAAM,EAAElC,SAAS,CAAC6C;AAJA,CAApB;AAOAxC,OAAO,CAACyC,YAAR,GAAuB;AACrBX,EAAAA,KAAK,EAAE,SADc;AAErBO,EAAAA,WAAW,EAAE,qBAFQ;AAGrBR,EAAAA,MAAM,EAAE,MAAM,CAAE;AAHK,CAAvB;AAMA,eAAe7B,OAAf","sourcesContent":["// component that handles the rendering of an insight\r\nimport React, {useState, useEffect} from 'react'\r\nimport propTypes from 'prop-types'\r\n\r\nimport BarChart from '../charts/barChart/BarChart'\r\nimport PieChart from '../charts/pieChart/PieChart'\r\nimport LineChart from '../charts/lineChart/LineChart'\r\n\r\nimport backArrow from '../../../resources/backArrow.png'\r\n\r\nimport './Insight.css'\r\n\r\nconst Insight = props => {\r\n  const [data, setData] = useState([])\r\n\r\n  useEffect(() => { // load in all stress data when viewing an insight\r\n    async function fetchData() {\r\n      try {\r\n        const response = await fetch(`https://dstress-backend.herokuapp.com/api/stressor/GetStressor.php?id=&filter=`)\r\n        if (!response.ok) {\r\n          throw Error(response.statusText)\r\n        }\r\n        setData(await response.json())\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n  //Get data for analytics page\r\n  const dates = data.map(stressor => stressor['date'])\r\n  const titles = data.map(stressor => stressor['title'])\r\n  const actualSLs = data.map(stressor => stressor['actual-SL'])\r\n  const ancticipatedSLs = data.map(stressor => stressor['anticipated-SL'])\r\n  const actualSLsHidden = data.filter(stressor => stressor['hidden']!=='1').map(stressor => stressor['actual-SL'])\r\n  const ancticipatedSLsHidden = data.filter(stressor => stressor['hidden']!=='1').map(stressor => stressor['anticipated-SL'])\r\n  const numberHidden = data.map(stressor => stressor['hidden']).filter(a => a==='1').length\r\n  const stressLevels = []\r\n  for (let i=0; i<=5; i++) { // get the number of stressors of each stress level\r\n    stressLevels.push(data.filter((stressor) => stressor['actual-SL'] === '' + i).length)\r\n  }\r\n\r\n  return (\r\n    <div className='insight'>\r\n      <img\r\n        onClick={() => {props.goBack()}}\r\n        src={backArrow}\r\n        alt='back arrow'\r\n        className='back-arrow'\r\n      />\r\n      <h2>{props.title}</h2>\r\n      <hr/>\r\n      {(() => {\r\n        switch (props.chartType) { // render differnt charts based on the type of insight being rendered\r\n          case 'bar': return (\r\n            <BarChart\r\n              dataPack1={actualSLs.slice(0, 10)} // get 10 most recent data entries\r\n              dataPack2={ancticipatedSLs.slice(0, 10)}\r\n              titles={titles.slice(0, 10)}\r\n            />\r\n          )\r\n          case 'pie': return (\r\n            <PieChart\r\n              titles={['0', '1', '2', '3', '4', '5']} // graph showing number of stressors of each stress level\r\n              dataPack={stressLevels}\r\n            />\r\n          )\r\n          case 'line': return (\r\n            <LineChart\r\n              dataPack1={actualSLs}\r\n              dataPack2={ancticipatedSLs}\r\n              dates={dates}\r\n            />\r\n          )\r\n          case 'stats': return (\r\n            <div className='stats'>\r\n              <b>Number of stressors: </b>{data.length}<br/>\r\n              <b>Number Hidden: </b>{numberHidden}<br/>\r\n              <b>Average actual stress level: </b>{(actualSLs.filter(a => !!a).reduce((a, b) => parseInt(a)+parseInt(b), 0)/actualSLs.filter(a => !!a).length).toFixed(2)}<br/>\r\n              <b>Average anticipated stress level: </b>{(ancticipatedSLsHidden.filter(a => !!a).reduce((a, b) => parseInt(a)+parseInt(b), 0)/ancticipatedSLs.filter(a => !!a).length).toFixed(2)}<br/>\r\n              <b>Average actual stress level when hidden: </b>{(actualSLsHidden.filter(a => !!a).reduce((a, b) => parseInt(a)+parseInt(b), 0)/actualSLs.filter(a => !!a).length).toFixed(2)}<br/>\r\n              <b>Average anticipated stress level when hidden: </b>{(ancticipatedSLs.filter(a => !!a).reduce((a, b) => parseInt(a)+parseInt(b), 0)/ancticipatedSLs.filter(a => !!a).length).toFixed(2)}<br/>\r\n            </div>\r\n          )\r\n          default: return (<p>Error</p>)\r\n        }\r\n      })()}\r\n      <br/>\r\n      {props.description && <div><b>Description</b><br/>{props.description}</div>}\r\n      <br/>\r\n      <br/>\r\n    </div>\r\n  )\r\n}\r\n\r\nInsight.propTypes = {\r\n  title: propTypes.string,\r\n  description: propTypes.string,\r\n  chartType: propTypes.string.isRequired,\r\n  goBack: propTypes.func\r\n}\r\n\r\nInsight.defaultProps = {\r\n  title: 'Insight',\r\n  description: 'Insight description',\r\n  goBack: () => {}\r\n}\r\n\r\nexport default Insight\r\n"]},"metadata":{},"sourceType":"module"}